# typed: false
# frozen_string_literal: true

# This file was generated by GoReleaser. DO NOT EDIT.
class AstCli < Formula
  desc "CLI for AST"
  homepage "https://github.com/Checkmarx/ast-cli"
  version "2.0.16"
  license "Apache"
  bottle :unneeded

  on_macos do
    if Hardware::CPU.intel?
      url "https://github.com/Checkmarx/ast-cli/releases/download/2.0.16/ast-cli_2.0.16_darwin_amd64.tar.gz"
      sha256 "edf2560b6841f6dee8ec5e35b8196c6cdf7d4d9f3b36c9266ce06b9f7d2fe084"
    end
    if Hardware::CPU.arm?
      url "https://github.com/Checkmarx/ast-cli/releases/download/2.0.16/ast-cli_2.0.16_darwin_arm64.tar.gz"
      sha256 "678177b68d10b5f5a72e07ea0ca0c070ef6fa2d513b507dd1b3040909a8d4886"
    end
  end

  on_linux do
    if Hardware::CPU.intel?
      url "https://github.com/Checkmarx/ast-cli/releases/download/2.0.16/ast-cli_2.0.16_linux_x64.tar.gz"
      sha256 "36086486a7a9ebd92cd48985e3c35cd090ab3891ec9bd363c0a16a1bad51e7b0"
    end
  end

  def install
    bin.install "cx"
    # Install bash completion
    output = Utils.popen_read("#{bin}/cx utils completion -s bash")
    (bash_completion/"cx").write output
    # Install zsh completion
    output = Utils.popen_read("#{bin}/cx utils completion -s zsh")
    (zsh_completion/"_cx").write output
    # Install fish completion
    output = Utils.popen_read("#{bin}/cx utils completion -s fish")
    (fish_completion/"cx.fish").write output
  end

  test do
    system "#{bin}/cx version"
  end
end
