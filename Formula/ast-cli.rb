# typed: false
# frozen_string_literal: true

# This file was generated by GoReleaser. DO NOT EDIT.
class AstCli < Formula
  desc "CLI for AST"
  homepage "https://github.com/Checkmarx/ast-cli"
  version "2.0.7"
  license "Apache"
  bottle :unneeded

  on_macos do
    if Hardware::CPU.intel?
      url "https://github.com/Checkmarx/ast-cli/releases/download/2.0.7/ast-cli_2.0.7_darwin_x64.tar.gz"
      sha256 "e463a604427e021ad20ff9743ea6a78ec0093a3789fbada14152a9ef880de33c"
    end
    if Hardware::CPU.arm?
      url "https://github.com/Checkmarx/ast-cli/releases/download/2.0.7/ast-cli_2.0.7_darwin_arm64.tar.gz"
      sha256 "b9ba257f8df33ff850cf1bfeb3c805d95e6bf629d7b94b5857d30c92b739b7a8"
    end
  end

  on_linux do
    if Hardware::CPU.intel?
      url "https://github.com/Checkmarx/ast-cli/releases/download/2.0.7/ast-cli_2.0.7_linux_x64.tar.gz"
      sha256 "773f4b474d60dc269811b30e367834d1a7147156e634106346f1e485ca9af4f2"
    end
    if Hardware::CPU.arm? && Hardware::CPU.is_64_bit?
      url "https://github.com/Checkmarx/ast-cli/releases/download/2.0.7/ast-cli_2.0.7_linux_arm64.tar.gz"
      sha256 "47e6032ff7999f49c0388b8cf58caf35f57f04d9d2d54da27d8009b5cc0249b1"
    end
  end

  def install
    bin.install "cx"
    # Install bash completion
    output = Utils.popen_read("#{bin}/cx utils completion -s bash")
    (bash_completion/"cx").write output
    # Install zsh completion
    output = Utils.popen_read("#{bin}/cx utils completion -s zsh")
    (zsh_completion/"_cx").write output
    # Install fish completion
    output = Utils.popen_read("#{bin}/cx utils completion -s fish")
    (fish_completion/"cx.fish").write output
  end

  test do
    system "#{bin}/cx version"
  end
end
