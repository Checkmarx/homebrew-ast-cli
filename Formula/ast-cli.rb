# typed: false
# frozen_string_literal: true

# This file was generated by GoReleaser. DO NOT EDIT.
class AstCli < Formula
  desc "CLI for AST"
  homepage "https://github.com/Checkmarx/ast-cli"
  version "2.0.13"
  license "Apache"
  bottle :unneeded

  on_macos do
    if Hardware::CPU.intel?
      url "https://github.com/Checkmarx/ast-cli/releases/download/2.0.13/ast-cli_2.0.13_darwin_x64.tar.gz"
      sha256 "7e1ce8233cb4532b10c0f2a57f81e648aef7cf4b0b598a65f79c4d61a885d36a"
    end
    if Hardware::CPU.arm?
      url "https://github.com/Checkmarx/ast-cli/releases/download/2.0.13/ast-cli_2.0.13_darwin_arm64.tar.gz"
      sha256 "9cdf25211bc2c2bb3d78af51cd5b67caf318adbe985e452dddf68028ac75c30b"
    end
  end

  on_linux do
    if Hardware::CPU.intel?
      url "https://github.com/Checkmarx/ast-cli/releases/download/2.0.13/ast-cli_2.0.13_linux_x64.tar.gz"
      sha256 "031bb1dd35878fc06d797848f60680dcd4bcea51b5e3504455bdc3690706668b"
    end
    if Hardware::CPU.arm? && Hardware::CPU.is_64_bit?
      url "https://github.com/Checkmarx/ast-cli/releases/download/2.0.13/ast-cli_2.0.13_linux_arm64.tar.gz"
      sha256 "c94a98b45b32bf4533174133967838797240f7471252cf43a1a39dc7340f015b"
    end
  end

  def install
    bin.install "cx"
    # Install bash completion
    output = Utils.popen_read("#{bin}/cx utils completion -s bash")
    (bash_completion/"cx").write output
    # Install zsh completion
    output = Utils.popen_read("#{bin}/cx utils completion -s zsh")
    (zsh_completion/"_cx").write output
    # Install fish completion
    output = Utils.popen_read("#{bin}/cx utils completion -s fish")
    (fish_completion/"cx.fish").write output
  end

  test do
    system "#{bin}/cx version"
  end
end
