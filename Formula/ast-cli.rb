# typed: false
# frozen_string_literal: true

# This file was generated by GoReleaser. DO NOT EDIT.
class AstCli < Formula
  desc "CLI for AST"
  homepage "https://github.com/Checkmarx/ast-cli"
  version "2.0.17"
  license "Apache"
  bottle :unneeded

  on_macos do
    if Hardware::CPU.intel?
      url "https://github.com/Checkmarx/ast-cli/releases/download/2.0.17/ast-cli_2.0.17_darwin_x64.tar.gz"
      sha256 "49ad3a4d6d76b0161ec2ab9ad9e723b376f161c4941598c4f454d5f0ecd7b50e"
    end
    if Hardware::CPU.arm?
      url "https://github.com/Checkmarx/ast-cli/releases/download/2.0.17/ast-cli_2.0.17_darwin_arm64.tar.gz"
      sha256 "3a27ec3b1301fee056f9f13e5745d6ec6781dbe46ee16d2bd504de6bdcc6dd42"
    end
  end

  on_linux do
    if Hardware::CPU.intel?
      url "https://github.com/Checkmarx/ast-cli/releases/download/2.0.17/ast-cli_2.0.17_linux_x64.tar.gz"
      sha256 "dab87098b2c07b5e502ce13a07a60711e3d9283ffd9cc6bc28a292edee246b1c"
    end
  end

  def install
    bin.install "cx"
    # Install bash completion
    output = Utils.popen_read("#{bin}/cx utils completion -s bash")
    (bash_completion/"cx").write output
    # Install zsh completion
    output = Utils.popen_read("#{bin}/cx utils completion -s zsh")
    (zsh_completion/"_cx").write output
    # Install fish completion
    output = Utils.popen_read("#{bin}/cx utils completion -s fish")
    (fish_completion/"cx.fish").write output
  end

  test do
    system "#{bin}/cx version"
  end
end
